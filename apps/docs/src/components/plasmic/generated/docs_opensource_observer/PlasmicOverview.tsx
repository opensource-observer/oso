/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2CtczDeUz9jL9qnFi6NWuQ
// Component: z50hW5Ihi9k5

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from "@plasmicapp/react-web/lib/host";

import Card from "../../Card"; // plasmic-import: XdMR0R8lmSdz/component
import LinkCard from "../../LinkCard"; // plasmic-import: _F-nuwBX0XMK/component
import Button from "../../Button"; // plasmic-import: 8u0yNVg3vXsq/component
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantskb7NFax8VjYw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: kb7NFax8VjYW/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 2CtczDeUz9jL9qnFi6NWuQ/projectcss
import sty from "./PlasmicOverview.module.css"; // plasmic-import: z50hW5Ihi9k5/css

import IdeaSvgrepoComSvgIcon from "./icons/PlasmicIcon__IdeaSvgrepoComSvg"; // plasmic-import: IUL_Z3b2VK27/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4hUpITJttWoK/icon

createPlasmicElementProxy;

export type PlasmicOverview__VariantMembers = {
  theme: "dark";
};
export type PlasmicOverview__VariantsArgs = {
  theme?: SingleChoiceArg<"dark">;
};
type VariantPropType = keyof PlasmicOverview__VariantsArgs;
export const PlasmicOverview__VariantProps = new Array<VariantPropType>(
  "theme",
);

export type PlasmicOverview__ArgsType = {};
type ArgPropType = keyof PlasmicOverview__ArgsType;
export const PlasmicOverview__ArgProps = new Array<ArgPropType>();

export type PlasmicOverview__OverridesType = {
  root?: Flex__<"div">;
  code?: Flex__<"code">;
  iframe?: Flex__<typeof Iframe>;
  section?: Flex__<"section">;
};

export interface DefaultOverviewProps {
  theme?: SingleChoiceArg<"dark">;
  className?: string;
}

const $$ = {};

function PlasmicOverview__RenderFunc(props: {
  variants: PlasmicOverview__VariantsArgs;
  args: PlasmicOverview__ArgsType;
  overrides: PlasmicOverview__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "theme",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.theme,
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskb7NFax8VjYw(),
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.roottheme_dark]: hasVariant($state, "theme", "dark") },
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__tWab3)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___4SAnY)}
        >
          <div className={classNames(projectcss.all, sty.freeBox___5BnBk)}>
            <Card
              className={classNames("__wab_instance", sty.card__tzPvE, {
                [sty.cardtheme_dark__tzPvEswWww]: hasVariant(
                  $state,
                  "theme",
                  "dark",
                ),
              })}
              noTitle={true}
              theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
              title={null}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sAj3L, {
                  [sty.freeBoxtheme_dark__sAj3LswWww]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                })}
              >
                <IdeaSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__kQFn8, {
                    [sty.svgtheme_dark__kQFn8SwWww]: hasVariant(
                      $state,
                      "theme",
                      "dark",
                    ),
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qNqPr,
                    {
                      [sty.texttheme_dark__qNqPrswWww]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Tip:"}
                    </span>
                    <React.Fragment>{" Open search with "}</React.Fragment>
                    {
                      <code
                        data-plasmic-name={"code"}
                        data-plasmic-override={overrides.code}
                        className={classNames(
                          projectcss.all,
                          projectcss.code,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.code,
                          {
                            [sty.codetheme_dark]: hasVariant(
                              $state,
                              "theme",
                              "dark",
                            ),
                          },
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"/"}
                          </span>
                        </React.Fragment>
                      </code>
                    }
                    <React.Fragment> </React.Fragment>
                  </React.Fragment>
                </div>
              </Stack__>
            </Card>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__pNmic)}
          >
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__ey3Ew,
                {
                  [sty.h1theme_dark__ey3EwswWww]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                },
              )}
            >
              {"Most popular"}
            </h1>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__ezEbp)}
            >
              <div className={classNames(projectcss.all, sty.column__aSOwh)}>
                <LinkCard
                  className={classNames("__wab_instance", sty.linkCard__kJrR, {
                    [sty.linkCardtheme_dark__kJrRswWww]: hasVariant(
                      $state,
                      "theme",
                      "dark",
                    ),
                  })}
                  image={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___2TJvr)}
                      displayHeight={"50px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"50px"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/plasmic/docs_opensource_observer/images/tealIconSvg.svg",
                        fullWidth: 52,
                        fullHeight: 52,
                        aspectRatio: 1,
                      }}
                    />
                  }
                  link={"/docs/get-started/"}
                  theme={
                    hasVariant($state, "theme", "dark") ? "dark" : undefined
                  }
                  title={"Get started"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dW9Mz,
                      {
                        [sty.texttheme_dark__dW9MzswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                  >
                    {"Make your first queries to the OSO data lake or API"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___07Bki,
                    )}
                  >
                    {"something here"}
                  </div>
                </LinkCard>
              </div>
              <div className={classNames(projectcss.all, sty.column__isoTf)}>
                <LinkCard
                  className={classNames("__wab_instance", sty.linkCard__dz0VJ, {
                    [sty.linkCardtheme_dark__dz0VJswWww]: hasVariant(
                      $state,
                      "theme",
                      "dark",
                    ),
                  })}
                  image={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__pglqc)}
                      displayHeight={"50px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"50px"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/plasmic/docs_opensource_observer/images/blueIconSvg.svg",
                        fullWidth: 51,
                        fullHeight: 52,
                        aspectRatio: 0.980769,
                      }}
                    />
                  }
                  link={"/docs/integrate/datasets/"}
                  theme={
                    hasVariant($state, "theme", "dark") ? "dark" : undefined
                  }
                  title={"View datasets"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p4QzW,
                      {
                        [sty.texttheme_dark__p4QzWswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                  >
                    {"Explore more than 100TB of curated public datasets"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1TlBs,
                    )}
                  >
                    {"something here"}
                  </div>
                </LinkCard>
              </div>
              <div className={classNames(projectcss.all, sty.column___7E8NH)}>
                <LinkCard
                  className={classNames("__wab_instance", sty.linkCard__nIpZx, {
                    [sty.linkCardtheme_dark__nIpZXswWww]: hasVariant(
                      $state,
                      "theme",
                      "dark",
                    ),
                  })}
                  image={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__w6WiN)}
                      displayHeight={"50px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"50px"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/plasmic/docs_opensource_observer/images/redIconSvg.svg",
                        fullWidth: 61,
                        fullHeight: 60,
                        aspectRatio: 1.016667,
                      }}
                    />
                  }
                  link={"/docs/references/"}
                  theme={
                    hasVariant($state, "theme", "dark") ? "dark" : undefined
                  }
                  title={"Learn how OSO works"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0VWiG,
                      {
                        [sty.texttheme_dark___0VWiGswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                  >
                    {
                      "See how all the pieces in our open data pipeline fit together"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8WkCz,
                    )}
                  >
                    {"something here"}
                  </div>
                </LinkCard>
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___831Jf)}
          >
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__vUyYu,
                {
                  [sty.h1theme_dark__vUyYuswWww]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                },
              )}
            >
              {"Browse by use case"}
            </h1>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__geZKo)}
            >
              <div className={classNames(projectcss.all, sty.column__qSw0C)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wlFoS)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fKgut,
                      {
                        [sty.texttheme_dark__fKgutswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                  >
                    {"For Data Scientists"}
                  </div>
                  <LinkCard
                    className={classNames(
                      "__wab_instance",
                      sty.linkCard__kSnxQ,
                      {
                        [sty.linkCardtheme_dark__kSnxQswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                    link={
                      "https://docs.opensource.observer/docs/guides/notebooks/"
                    }
                    noTitle={true}
                    theme={
                      hasVariant($state, "theme", "dark") ? "dark" : undefined
                    }
                    title={"Get started"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zAjRu,
                        {
                          [sty.texttheme_dark__zAjRUswWww]: hasVariant(
                            $state,
                            "theme",
                            "dark",
                          ),
                        },
                      )}
                    >
                      {"\ud83d\udcd3 \nConnect to notebooks"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b8GL5,
                      )}
                    >
                      {"something here"}
                    </div>
                  </LinkCard>
                  <LinkCard
                    className={classNames(
                      "__wab_instance",
                      sty.linkCard__vc6Kd,
                      {
                        [sty.linkCardtheme_dark__vc6KdswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                    link={"https://docs.opensource.observer/docs/tutorials/"}
                    noTitle={true}
                    theme={
                      hasVariant($state, "theme", "dark") ? "dark" : undefined
                    }
                    title={"Get started"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__beYh,
                        {
                          [sty.texttheme_dark__beYhSwWww]: hasVariant(
                            $state,
                            "theme",
                            "dark",
                          ),
                        },
                      )}
                    >
                      {"\ud83d\udcda \nSee tutorials"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mj707,
                      )}
                    >
                      {"something here"}
                    </div>
                  </LinkCard>
                  <LinkCard
                    className={classNames(
                      "__wab_instance",
                      sty.linkCard__dOuOh,
                      {
                        [sty.linkCardtheme_dark__dOuOhswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                    link={
                      "https://docs.opensource.observer/docs/contribute-models/"
                    }
                    noTitle={true}
                    theme={
                      hasVariant($state, "theme", "dark") ? "dark" : undefined
                    }
                    title={"Get started"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tl9Lj,
                        {
                          [sty.texttheme_dark__tl9LJswWww]: hasVariant(
                            $state,
                            "theme",
                            "dark",
                          ),
                        },
                      )}
                    >
                      {"\ud83e\udd16 \nContribute models"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9DsmD,
                      )}
                    >
                      {"something here"}
                    </div>
                  </LinkCard>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__luYg1)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tIrjm)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wWor,
                      {
                        [sty.texttheme_dark__wWorswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                  >
                    {"For Developers"}
                  </div>
                  <LinkCard
                    className={classNames(
                      "__wab_instance",
                      sty.linkCard__cPcZn,
                      {
                        [sty.linkCardtheme_dark__cPcZnswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                    link={"https://docs.opensource.observer/docs/integrate/api"}
                    noTitle={true}
                    theme={
                      hasVariant($state, "theme", "dark") ? "dark" : undefined
                    }
                    title={"Get started"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sqxQf,
                        {
                          [sty.texttheme_dark__sqxQfswWww]: hasVariant(
                            $state,
                            "theme",
                            "dark",
                          ),
                        },
                      )}
                    >
                      {"\u26a1 \nUse the GraphQL API"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fllMb,
                      )}
                    >
                      {"something here"}
                    </div>
                  </LinkCard>
                  <LinkCard
                    className={classNames(
                      "__wab_instance",
                      sty.linkCard___6OUB,
                      {
                        [sty.linkCardtheme_dark___6OUBswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                    link={
                      "https://docs.opensource.observer/docs/guides/dagster/"
                    }
                    noTitle={true}
                    theme={
                      hasVariant($state, "theme", "dark") ? "dark" : undefined
                    }
                    title={"Get started"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gcly2,
                        {
                          [sty.texttheme_dark__gcly2SwWww]: hasVariant(
                            $state,
                            "theme",
                            "dark",
                          ),
                        },
                      )}
                    >
                      {"\ud83d\udcc8 \nView the entire pipeline"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u7QRc,
                      )}
                    >
                      {"something here"}
                    </div>
                  </LinkCard>
                  <LinkCard
                    className={classNames(
                      "__wab_instance",
                      sty.linkCard___3ZeVt,
                      {
                        [sty.linkCardtheme_dark___3ZeVtswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                    link={
                      "https://docs.opensource.observer/docs/contribute-data/"
                    }
                    noTitle={true}
                    theme={
                      hasVariant($state, "theme", "dark") ? "dark" : undefined
                    }
                    title={"Get started"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pEtRo,
                        {
                          [sty.texttheme_dark__pEtRoswWww]: hasVariant(
                            $state,
                            "theme",
                            "dark",
                          ),
                        },
                      )}
                    >
                      {"\ud83d\udd0c \nConnect your data"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fFg9B,
                      )}
                    >
                      {"something here"}
                    </div>
                  </LinkCard>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__cfwvN)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kpAV)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iLoJo,
                      {
                        [sty.texttheme_dark__iLoJOswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                  >
                    {"For OSS Projects"}
                  </div>
                  <LinkCard
                    className={classNames(
                      "__wab_instance",
                      sty.linkCard__m1Me0,
                      {
                        [sty.linkCardtheme_dark__m1Me0SwWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                    link={"https://docs.opensource.observer/docs/projects/"}
                    noTitle={true}
                    theme={
                      hasVariant($state, "theme", "dark") ? "dark" : undefined
                    }
                    title={"Get started"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bj3Bk,
                        {
                          [sty.texttheme_dark__bj3BkswWww]: hasVariant(
                            $state,
                            "theme",
                            "dark",
                          ),
                        },
                      )}
                    >
                      {"\u2795 \nAdd your project"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___96W6,
                      )}
                    >
                      {"something here"}
                    </div>
                  </LinkCard>
                  <LinkCard
                    className={classNames(
                      "__wab_instance",
                      sty.linkCard__lEk64,
                      {
                        [sty.linkCardtheme_dark__lEk64SwWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                    link={
                      "https://docs.opensource.observer/docs/projects/view-artifacts"
                    }
                    noTitle={true}
                    theme={
                      hasVariant($state, "theme", "dark") ? "dark" : undefined
                    }
                    title={"Get started"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ixNym,
                        {
                          [sty.texttheme_dark__ixNyMswWww]: hasVariant(
                            $state,
                            "theme",
                            "dark",
                          ),
                        },
                      )}
                    >
                      {"\ud83d\udce6 \nView project artifacts"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tknnv,
                      )}
                    >
                      {"something here"}
                    </div>
                  </LinkCard>
                  <LinkCard
                    className={classNames(
                      "__wab_instance",
                      sty.linkCard__tylXm,
                      {
                        [sty.linkCardtheme_dark__tylXMswWww]: hasVariant(
                          $state,
                          "theme",
                          "dark",
                        ),
                      },
                    )}
                    link={
                      "https://docs.opensource.observer/docs/projects/troubleshoot"
                    }
                    noTitle={true}
                    theme={
                      hasVariant($state, "theme", "dark") ? "dark" : undefined
                    }
                    title={"Get started"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tMoc9,
                        {
                          [sty.texttheme_dark__tMoc9SwWww]: hasVariant(
                            $state,
                            "theme",
                            "dark",
                          ),
                        },
                      )}
                    >
                      {"\ud83d\udd27 \nTroubleshoot data issues"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nQkmU,
                      )}
                    >
                      {"something here"}
                    </div>
                  </LinkCard>
                </Stack__>
              </div>
            </Stack__>
          </Stack__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__fxHBm,
            )}
            href={"/docs/getting-started/"}
            platform={"react"}
          >
            <Card
              className={classNames("__wab_instance", sty.card__sluYh, {
                [sty.cardtheme_dark__sluYhswWww]: hasVariant(
                  $state,
                  "theme",
                  "dark",
                ),
              })}
              theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
              title={
                <div className={classNames(projectcss.all, sty.freeBox__mfEow)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rhKyh,
                    )}
                  >
                    {"Get started"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0I7Ir,
                    )}
                  >
                    {"Make your first queries to\nthe OSO data lake or API"}
                  </div>
                </div>
              }
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pZXeC)}
              />
            </Card>
          </PlasmicLink__>
          <Card
            className={classNames("__wab_instance", sty.card__mzitY, {
              [sty.cardtheme_dark__mzitYswWww]: hasVariant(
                $state,
                "theme",
                "dark",
              ),
            })}
            theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
            title={
              <div className={classNames(projectcss.all, sty.freeBox__qetWv)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__inKk7,
                  )}
                >
                  {"View datasets"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c1CvI,
                    {
                      [sty.texttheme_dark__c1CvIswWww]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {"Explore more than 100TB\nof curated public datasets"}
                </div>
              </div>
            }
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nqous)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__wPjSi, {
                  [sty.buttontheme_dark__wPjSIswWww]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                })}
                color={hasVariant($state, "theme", "dark") ? "blue" : "blue"}
                link={"/docs/integrate/"}
                showEndIcon={true}
                startIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg___4Llue)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rwUA,
                    {
                      [sty.texttheme_dark__rwUAswWww]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {"View datasets"}
                </div>
              </Button>
            </Stack__>
          </Card>
          <Card
            className={classNames("__wab_instance", sty.card___5Vrg5, {
              [sty.cardtheme_dark___5Vrg5SwWww]: hasVariant(
                $state,
                "theme",
                "dark",
              ),
            })}
            theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
            title={
              <div className={classNames(projectcss.all, sty.freeBox__xxXLa)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ohDbE,
                  )}
                >
                  {"Learn how OSO works"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wsz2Q,
                  )}
                >
                  {
                    "See how all the pieces in our open data pipeline fit together"
                  }
                </div>
              </div>
            }
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__niS9G)}
            >
              <Button
                className={classNames("__wab_instance", sty.button___9UuUe, {
                  [sty.buttontheme_dark___9UuUeswWww]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                })}
                color={hasVariant($state, "theme", "dark") ? "blue" : "blue"}
                link={"/docs/references/"}
                showEndIcon={true}
                startIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__viUxk)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vwRNb,
                    {
                      [sty.texttheme_dark__vwRNbswWww]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {"Learn how OSO works"}
                </div>
              </Button>
            </Stack__>
          </Card>
        </Stack__>
        <div
          className={classNames(projectcss.all, sty.freeBox__f4YhD, {
            [sty.freeBoxtheme_dark__f4YhDswWww]: hasVariant(
              $state,
              "theme",
              "dark",
            ),
          })}
        >
          <Card
            className={classNames("__wab_instance", sty.card__mcj7Y)}
            noTitle={true}
            title={" "}
          >
            <div className={classNames(projectcss.all, sty.freeBox__yLyNm)}>
              <Iframe
                data-plasmic-name={"iframe"}
                data-plasmic-override={overrides.iframe}
                className={classNames("__wab_instance", sty.iframe, {
                  [sty.iframetheme_dark]: hasVariant($state, "theme", "dark"),
                })}
                preview={false}
                src={"https://kariba.substack.com/embed"}
                srcDoc={"<div><h3>Heading</h3><p>Example text...</p></div>"}
                useHtml={false}
              />
            </div>
          </Card>
        </div>
      </Stack__>
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section, {
          [sty.sectiontheme_dark]: hasVariant($state, "theme", "dark"),
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__dg7Tp)}
        >
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___1YCh,
            )}
            href={"/docs/getting-started/"}
            platform={"react"}
          >
            <Card
              className={classNames("__wab_instance", sty.card__cwdaj, {
                [sty.cardtheme_dark__cwdajswWww]: hasVariant(
                  $state,
                  "theme",
                  "dark",
                ),
              })}
              theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
              title={
                <div
                  className={classNames(projectcss.all, sty.freeBox___6VEbK)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4UUcy,
                    )}
                  >
                    {"Get started"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ekYl,
                    )}
                  >
                    {"Make your first queries to\nthe OSO data lake or API"}
                  </div>
                </div>
              }
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zLn7)}
              />
            </Card>
          </PlasmicLink__>
          <Card
            className={classNames("__wab_instance", sty.card__yCEkJ, {
              [sty.cardtheme_dark__yCEkJswWww]: hasVariant(
                $state,
                "theme",
                "dark",
              ),
            })}
            theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
            title={
              <div className={classNames(projectcss.all, sty.freeBox__e3Pt2)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zRk46,
                  )}
                >
                  {"View datasets"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nrXug,
                    {
                      [sty.texttheme_dark__nrXuGswWww]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {"Explore more than 100TB\nof curated public datasets"}
                </div>
              </div>
            }
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ecye)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__rzQmz, {
                  [sty.buttontheme_dark__rzQmzswWww]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                })}
                color={hasVariant($state, "theme", "dark") ? "blue" : "blue"}
                link={"/docs/integrate/"}
                showEndIcon={true}
                startIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__rV6Gm)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l9YD7,
                    {
                      [sty.texttheme_dark__l9YD7SwWww]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {"View datasets"}
                </div>
              </Button>
            </Stack__>
          </Card>
          <Card
            className={classNames("__wab_instance", sty.card__jGFe2, {
              [sty.cardtheme_dark__jGFe2SwWww]: hasVariant(
                $state,
                "theme",
                "dark",
              ),
            })}
            theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
            title={
              <div className={classNames(projectcss.all, sty.freeBox__dOaIu)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uAMoG,
                  )}
                >
                  {"Learn how OSO works"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b5Upp,
                  )}
                >
                  {
                    "See how all the pieces in our open data pipeline fit together"
                  }
                </div>
              </div>
            }
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__etzxe)}
            >
              <Button
                className={classNames("__wab_instance", sty.button___4Zemi, {
                  [sty.buttontheme_dark___4ZemIswWww]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                })}
                color={hasVariant($state, "theme", "dark") ? "blue" : "blue"}
                link={"/docs/references/"}
                showEndIcon={true}
                startIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__c3Ykn)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mSkLw,
                    {
                      [sty.texttheme_dark__mSkLWswWww]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {"Learn how OSO works"}
                </div>
              </Button>
            </Stack__>
          </Card>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___7Jr6O)}
        >
          <Card
            className={classNames("__wab_instance", sty.card__yrkRl, {
              [sty.cardtheme_dark__yrkRlswWww]: hasVariant(
                $state,
                "theme",
                "dark",
              ),
            })}
            theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
            title={
              <div className={classNames(projectcss.all, sty.freeBox__kCpwj)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3Inzx,
                  )}
                >
                  {"New to Open Source Observer?"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hXMvI,
                  )}
                >
                  {
                    "The getting started guide covers joining the data collective, signing up for an API key, and making your first queries to the OSO data warehouse."
                  }
                </div>
              </div>
            }
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8Gwy7, {
                [sty.freeBoxtheme_dark___8Gwy7SwWww]: hasVariant(
                  $state,
                  "theme",
                  "dark",
                ),
              })}
            >
              <Button
                className={classNames("__wab_instance", sty.button__yWcRg, {
                  [sty.buttontheme_dark__yWcRgswWww]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                })}
                color={hasVariant($state, "theme", "dark") ? "blue" : "blue"}
                link={"/docs/get-started/"}
                showEndIcon={true}
                startIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__vlH)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g6Dmm,
                    {
                      [sty.texttheme_dark__g6DmmswWww]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {"Get started"}
                </div>
              </Button>
            </Stack__>
          </Card>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__h5STz)}
        >
          <Card
            className={classNames("__wab_instance", sty.card__mZm0D, {
              [sty.cardtheme_dark__mZm0DswWww]: hasVariant(
                $state,
                "theme",
                "dark",
              ),
            })}
            theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
            title={
              <div className={classNames(projectcss.all, sty.freeBox___7Vint)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__acfxx,
                  )}
                >
                  {"Have data to share?"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zR9C,
                  )}
                >
                  {
                    "There are numerous ways to contribute, from making project updates to adding new impact metrics and data sources."
                  }
                </div>
              </div>
            }
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jAexh)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__oAygx, {
                  [sty.buttontheme_dark__oAygXswWww]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                })}
                color={hasVariant($state, "theme", "dark") ? "blue" : "blue"}
                link={"/docs/contribute-data/"}
                showEndIcon={true}
                startIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__buB60)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yf3Vl,
                    {
                      [sty.texttheme_dark__yf3VLswWww]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {"Contribute to OSO"}
                </div>
              </Button>
            </Stack__>
          </Card>
          <Card
            className={classNames("__wab_instance", sty.card__ll5S8, {
              [sty.cardtheme_dark__ll5S8SwWww]: hasVariant(
                $state,
                "theme",
                "dark",
              ),
            })}
            theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
            title={
              <div className={classNames(projectcss.all, sty.freeBox___1C9T)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kiP,
                  )}
                >
                  {"Want to build with OSO data?"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zgQTr,
                    {
                      [sty.texttheme_dark__zgQTrswWww]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {
                    "No matter if you are a senior developer or citizen data scientist, we want to make it easy for you to integrate OSO data."
                  }
                </div>
              </div>
            }
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__auYN)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__v5Nh4, {
                  [sty.buttontheme_dark__v5Nh4SwWww]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                })}
                color={hasVariant($state, "theme", "dark") ? "blue" : "blue"}
                link={"/docs/integrate/"}
                showEndIcon={true}
                startIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__v0Zbq)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cqZ8G,
                    {
                      [sty.texttheme_dark__cqZ8GswWww]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {"Get OSO data"}
                </div>
              </Button>
            </Stack__>
          </Card>
          <Card
            className={classNames("__wab_instance", sty.card__rpBx6, {
              [sty.cardtheme_dark__rpBx6SwWww]: hasVariant(
                $state,
                "theme",
                "dark",
              ),
            })}
            theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
            title={
              <div className={classNames(projectcss.all, sty.freeBox__tO5Gs)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vkO24,
                  )}
                >
                  {"Have questions about OSO?"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cTf5T,
                  )}
                >
                  {
                    "There's a lot under the hood, as we're continually indexing new data and expanding our suite of impact metrics."
                  }
                </div>
              </div>
            }
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gKpAk)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__lcYn7, {
                  [sty.buttontheme_dark__lcYn7SwWww]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                })}
                color={hasVariant($state, "theme", "dark") ? "blue" : "blue"}
                link={"/docs/references/"}
                showEndIcon={true}
                startIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg___2LGyA)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fW91Y,
                    {
                      [sty.texttheme_dark__fW91YswWww]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {"Learn how OSO works"}
                </div>
              </Button>
            </Stack__>
          </Card>
        </Stack__>
      </section>
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xUvIo,
          )}
        >
          {"1600px"}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "code", "iframe", "section"],
  code: ["code"],
  iframe: ["iframe"],
  section: ["section"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  code: "code";
  iframe: typeof Iframe;
  section: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOverview__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOverview__VariantsArgs;
    args?: PlasmicOverview__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOverview__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOverview__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOverview__ArgProps,
          internalVariantPropNames: PlasmicOverview__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicOverview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOverview";
  } else {
    func.displayName = `PlasmicOverview.${nodeName}`;
  }
  return func;
}

export const PlasmicOverview = Object.assign(
  // Top-level PlasmicOverview renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    code: makeNodeComponent("code"),
    iframe: makeNodeComponent("iframe"),
    section: makeNodeComponent("section"),

    // Metadata about props expected for PlasmicOverview
    internalVariantProps: PlasmicOverview__VariantProps,
    internalArgProps: PlasmicOverview__ArgProps,
  },
);

export default PlasmicOverview;
/* prettier-ignore-end */
