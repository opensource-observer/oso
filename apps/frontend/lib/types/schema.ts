/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./supabase";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicAdminUsersRowSchemaSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.number(),
  name: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const publicAdminUsersInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const publicAdminUsersUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicAdminUsersRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("admin_users_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicApiKeysRowSchemaSchema = z.object({
  api_key: z.string(),
  created_at: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const publicApiKeysInsertSchemaSchema = z.object({
  api_key: z.string(),
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const publicApiKeysUpdateSchemaSchema = z.object({
  api_key: z.string().optional(),
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicApiKeysRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("api_keys_user_id_fkey1"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicDynamicConnectorsRowSchemaSchema = z.object({
  config: jsonSchema.nullable(),
  connector_name: z.string(),
  connector_type: z.string(),
  created_at: z.string(),
  created_by: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  is_public: z.boolean().nullable(),
  org_id: z.string(),
  updated_at: z.string(),
});

export const publicDynamicConnectorsInsertSchemaSchema = z.object({
  config: jsonSchema.optional().nullable(),
  connector_name: z.string(),
  connector_type: z.string(),
  created_at: z.string().optional(),
  created_by: z.string(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_public: z.boolean().optional().nullable(),
  org_id: z.string(),
  updated_at: z.string().optional(),
});

export const publicDynamicConnectorsUpdateSchemaSchema = z.object({
  config: jsonSchema.optional().nullable(),
  connector_name: z.string().optional(),
  connector_type: z.string().optional(),
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_public: z.boolean().optional().nullable(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const publicDynamicConnectorsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("dynamic_connectors_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicOrganizationsRowSchemaSchema = z.object({
  created_at: z.string(),
  created_by: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  org_name: z.string(),
  updated_at: z.string(),
});

export const publicOrganizationsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_name: z.string(),
  updated_at: z.string().optional(),
});

export const publicOrganizationsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_name: z.string().optional(),
  updated_at: z.string().optional(),
});

export const publicOrganizationsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("organizations_created_by_fkey1"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUserProfilesRowSchemaSchema = z.object({
  avatar_url: z.string().nullable(),
  email: z.string().nullable(),
  full_name: z.string().nullable(),
  id: z.string(),
  updated_at: z.string().nullable(),
  username: z.string().nullable(),
  website: z.string().nullable(),
});

export const publicUserProfilesInsertSchemaSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
});

export const publicUserProfilesUpdateSchemaSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
});

export const publicUsersByOrganizationRowSchemaSchema = z.object({
  created_at: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  org_id: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
  user_role: z.string(),
});

export const publicUsersByOrganizationInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_id: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
  user_role: z.string(),
});

export const publicUsersByOrganizationUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
  user_role: z.string().optional(),
});

export const publicUsersByOrganizationRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("users_by_organization_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("users_by_organization_user_id_fkey1"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicHasuraTokenHookArgsSchemaSchema = z.object({
  event: jsonSchema,
});

export const publicHasuraTokenHookReturnsSchemaSchema = jsonSchema;
