/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "@/lib/types/supabase";

export const publicDatasetTypeSchema = z.union([
  z.literal("SQL_MODEL"),
  z.literal("DATA_CONNECTOR"),
  z.literal("DATA_INGESTION"),
]);

export const publicModelKindSchema = z.union([
  z.literal("INCREMENTAL_BY_TIME_RANGE"),
  z.literal("INCREMENTAL_BY_UNIQUE_KEY"),
  z.literal("INCREMENTAL_BY_PARTITION"),
  z.literal("SCD_TYPE_2_BY_TIME"),
  z.literal("SCD_TYPE_2_BY_COLUMN"),
  z.literal("FULL"),
  z.literal("VIEW"),
]);

export const publicModelRunStatusSchema = z.union([
  z.literal("running"),
  z.literal("completed"),
  z.literal("failed"),
  z.literal("canceled"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const adminUsersRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.number(),
  name: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const adminUsersInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const adminUsersUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const adminUsersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("admin_users_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const apiKeysRowSchema = z.object({
  api_key: z.string(),
  created_at: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  org_id: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const apiKeysInsertSchema = z.object({
  api_key: z.string(),
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  org_id: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const apiKeysUpdateSchema = z.object({
  api_key: z.string().optional(),
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const apiKeysRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("api_keys_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("api_keys_user_id_fkey1"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const chatHistoryRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string(),
  data: z.string().nullable(),
  deleted_at: z.string().nullable(),
  display_name: z.string(),
  id: z.string(),
  org_id: z.string(),
  updated_at: z.string(),
});

export const chatHistoryInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string(),
  data: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  display_name: z.string(),
  id: z.string().optional(),
  org_id: z.string(),
  updated_at: z.string().optional(),
});

export const chatHistoryUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  data: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  display_name: z.string().optional(),
  id: z.string().optional(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const chatHistoryRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("chat_history_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("chat_history_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const connectorRelationshipsRowSchema = z.object({
  id: z.string(),
  org_id: z.string(),
  source_column_name: z.string(),
  source_table_id: z.string(),
  target_column_name: z.string().nullable(),
  target_oso_entity: z.string().nullable(),
  target_table_id: z.string().nullable(),
});

export const connectorRelationshipsInsertSchema = z.object({
  id: z.string().optional(),
  org_id: z.string(),
  source_column_name: z.string(),
  source_table_id: z.string(),
  target_column_name: z.string().optional().nullable(),
  target_oso_entity: z.string().optional().nullable(),
  target_table_id: z.string().optional().nullable(),
});

export const connectorRelationshipsUpdateSchema = z.object({
  id: z.string().optional(),
  org_id: z.string().optional(),
  source_column_name: z.string().optional(),
  source_table_id: z.string().optional(),
  target_column_name: z.string().optional().nullable(),
  target_oso_entity: z.string().optional().nullable(),
  target_table_id: z.string().optional().nullable(),
});

export const connectorRelationshipsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_org_id"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("fk_source_column"),
    columns: z.tuple([
      z.literal("source_table_id"),
      z.literal("source_column_name"),
    ]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("dynamic_column_contexts"),
    referencedColumns: z.tuple([
      z.literal("table_id"),
      z.literal("column_name"),
    ]),
  }),
  z.object({
    foreignKeyName: z.literal("fk_source_table"),
    columns: z.tuple([z.literal("source_table_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("dynamic_table_contexts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("fk_target_column"),
    columns: z.tuple([
      z.literal("target_table_id"),
      z.literal("target_column_name"),
    ]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("dynamic_column_contexts"),
    referencedColumns: z.tuple([
      z.literal("table_id"),
      z.literal("column_name"),
    ]),
  }),
  z.object({
    foreignKeyName: z.literal("fk_target_table"),
    columns: z.tuple([z.literal("target_table_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("dynamic_table_contexts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const datasetsRowSchema = z.object({
  catalog: z.string(),
  created_at: z.string(),
  created_by: z.string(),
  dataset_type: publicDatasetTypeSchema,
  deleted_at: z.string().nullable(),
  description: z.string().nullable(),
  display_name: z.string(),
  id: z.string(),
  is_public: z.boolean(),
  name: z.string(),
  org_id: z.string(),
  schema: z.string(),
  updated_at: z.string(),
});

export const datasetsInsertSchema = z.object({
  catalog: z.string(),
  created_at: z.string().optional(),
  created_by: z.string(),
  dataset_type: publicDatasetTypeSchema,
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  display_name: z.string(),
  id: z.string().optional(),
  is_public: z.boolean().optional(),
  name: z.string(),
  org_id: z.string(),
  schema: z.string(),
  updated_at: z.string().optional(),
});

export const datasetsUpdateSchema = z.object({
  catalog: z.string().optional(),
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  dataset_type: publicDatasetTypeSchema.optional(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  display_name: z.string().optional(),
  id: z.string().optional(),
  is_public: z.boolean().optional(),
  name: z.string().optional(),
  org_id: z.string().optional(),
  schema: z.string().optional(),
  updated_at: z.string().optional(),
});

export const datasetsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("datasets_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("datasets_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const datasetsByOrganizationRowSchema = z.object({
  created_at: z.string(),
  dataset_id: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  org_id: z.string(),
});

export const datasetsByOrganizationInsertSchema = z.object({
  created_at: z.string().optional(),
  dataset_id: z.string(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_id: z.string(),
});

export const datasetsByOrganizationUpdateSchema = z.object({
  created_at: z.string().optional(),
  dataset_id: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_id: z.string().optional(),
});

export const datasetsByOrganizationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("datasets_by_organization_dataset_id_fkey"),
    columns: z.tuple([z.literal("dataset_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("datasets"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("datasets_by_organization_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const dynamicColumnContextsRowSchema = z.object({
  column_name: z.string(),
  data_type: z.string(),
  description: z.string().nullable(),
  sample_data: z.string().nullable(),
  table_id: z.string(),
});

export const dynamicColumnContextsInsertSchema = z.object({
  column_name: z.string(),
  data_type: z.string(),
  description: z.string().optional().nullable(),
  sample_data: z.string().optional().nullable(),
  table_id: z.string(),
});

export const dynamicColumnContextsUpdateSchema = z.object({
  column_name: z.string().optional(),
  data_type: z.string().optional(),
  description: z.string().optional().nullable(),
  sample_data: z.string().optional().nullable(),
  table_id: z.string().optional(),
});

export const dynamicColumnContextsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_table_context"),
    columns: z.tuple([z.literal("table_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("dynamic_table_contexts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const dynamicConnectorsRowSchema = z.object({
  config: jsonSchema.nullable(),
  connector_name: z.string(),
  connector_type: z.string(),
  created_at: z.string(),
  created_by: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  is_public: z.boolean().nullable(),
  org_id: z.string(),
  updated_at: z.string(),
});

export const dynamicConnectorsInsertSchema = z.object({
  config: jsonSchema.optional().nullable(),
  connector_name: z.string(),
  connector_type: z.string(),
  created_at: z.string().optional(),
  created_by: z.string(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_public: z.boolean().optional().nullable(),
  org_id: z.string(),
  updated_at: z.string().optional(),
});

export const dynamicConnectorsUpdateSchema = z.object({
  config: jsonSchema.optional().nullable(),
  connector_name: z.string().optional(),
  connector_type: z.string().optional(),
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_public: z.boolean().optional().nullable(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const dynamicConnectorsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_org_id"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const dynamicReplicationsRowSchema = z.object({
  config: jsonSchema,
  created_at: z.string(),
  created_by: z.string(),
  credentials_path: z.string().nullable(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  org_id: z.string(),
  replication_name: z.string(),
  replication_type: z.string(),
  updated_at: z.string(),
});

export const dynamicReplicationsInsertSchema = z.object({
  config: jsonSchema,
  created_at: z.string().optional(),
  created_by: z.string(),
  credentials_path: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_id: z.string(),
  replication_name: z.string(),
  replication_type: z.string(),
  updated_at: z.string().optional(),
});

export const dynamicReplicationsUpdateSchema = z.object({
  config: jsonSchema.optional(),
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  credentials_path: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_id: z.string().optional(),
  replication_name: z.string().optional(),
  replication_type: z.string().optional(),
  updated_at: z.string().optional(),
});

export const dynamicReplicationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_org_id"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const dynamicTableContextsRowSchema = z.object({
  connector_id: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  table_name: z.string(),
});

export const dynamicTableContextsInsertSchema = z.object({
  connector_id: z.string(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  table_name: z.string(),
});

export const dynamicTableContextsUpdateSchema = z.object({
  connector_id: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  table_name: z.string().optional(),
});

export const dynamicTableContextsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_connector_id"),
    columns: z.tuple([z.literal("connector_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("dynamic_connectors"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const invitationsRowSchema = z.object({
  accepted_at: z.string().nullable(),
  accepted_by: z.string().nullable(),
  created_at: z.string(),
  deleted_at: z.string().nullable(),
  email: z.string(),
  expires_at: z.string(),
  id: z.string(),
  invited_by: z.string(),
  org_id: z.string(),
  org_name: z.string(),
  updated_at: z.string(),
});

export const invitationsInsertSchema = z.object({
  accepted_at: z.string().optional().nullable(),
  accepted_by: z.string().optional().nullable(),
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  email: z.string(),
  expires_at: z.string().optional(),
  id: z.string().optional(),
  invited_by: z.string(),
  org_id: z.string(),
  org_name: z.string(),
  updated_at: z.string().optional(),
});

export const invitationsUpdateSchema = z.object({
  accepted_at: z.string().optional().nullable(),
  accepted_by: z.string().optional().nullable(),
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  email: z.string().optional(),
  expires_at: z.string().optional(),
  id: z.string().optional(),
  invited_by: z.string().optional(),
  org_id: z.string().optional(),
  org_name: z.string().optional(),
  updated_at: z.string().optional(),
});

export const invitationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("invitations_accepted_by_fkey"),
    columns: z.tuple([z.literal("accepted_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("invitations_invited_by_fkey"),
    columns: z.tuple([z.literal("invited_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("invitations_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const modelRowSchema = z.object({
  created_at: z.string(),
  dataset_id: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  is_enabled: z.boolean(),
  name: z.string(),
  org_id: z.string(),
  updated_at: z.string(),
});

export const modelInsertSchema = z.object({
  created_at: z.string().optional(),
  dataset_id: z.string(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_enabled: z.boolean().optional(),
  name: z.string(),
  org_id: z.string(),
  updated_at: z.string().optional(),
});

export const modelUpdateSchema = z.object({
  created_at: z.string().optional(),
  dataset_id: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_enabled: z.boolean().optional(),
  name: z.string().optional(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const modelRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("model_dataset_id_fkey"),
    columns: z.tuple([z.literal("dataset_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("datasets"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("model_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const modelReleaseRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  model_id: z.string(),
  model_revision_id: z.string(),
  org_id: z.string(),
  updated_at: z.string(),
});

export const modelReleaseInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  model_id: z.string(),
  model_revision_id: z.string(),
  org_id: z.string(),
  updated_at: z.string().optional(),
});

export const modelReleaseUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  model_id: z.string().optional(),
  model_revision_id: z.string().optional(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const modelReleaseRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("model_release_model_id_fkey"),
    columns: z.tuple([z.literal("model_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("model"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("model_release_model_revision_id_fkey"),
    columns: z.tuple([z.literal("model_revision_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("model_revision"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("model_release_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicModelDependencyTypeSchema = z.object({
  model_id: z.string().nullable(),
  alias: z.string().nullable(),
});

export const publicModelKindOptionsSchema = z.object({
  time_column: z.string().nullable(),
  time_column_format: z.string().nullable(),
  batch_size: z.number().nullable(),
  lookback: z.number().nullable(),
  unique_key_columns: z.array(z.string()).nullable(),
  when_matched_sql: z.string().nullable(),
  merge_filter: z.string().nullable(),
  valid_from_name: z.string().nullable(),
  valid_to_name: z.string().nullable(),
  invalidate_hard_deletes: z.boolean().nullable(),
  updated_at_column: z.string().nullable(),
  updated_at_as_valid_from: z.boolean().nullable(),
  scd_columns: z.array(z.string()).nullable(),
  execution_time_as_valid_from: z.boolean().nullable(),
});

export const publicModelColumnTypeSchema = z.object({
  name: z.string().nullable(),
  type: z.string().nullable(),
  description: z.string().nullable(),
});

export const modelRevisionInsertSchema = z.object({
  clustered_by: z.array(z.string()).optional().nullable(),
  code: z.string(),
  created_at: z.string().optional(),
  cron: z.string(),
  depends_on: z.array(publicModelDependencyTypeSchema).optional().nullable(),
  description: z.string().optional().nullable(),
  display_name: z.string(),
  end: z.string().optional().nullable(),
  hash: z.string(),
  id: z.string().optional(),
  kind: publicModelKindSchema,
  kind_options: publicModelKindOptionsSchema.optional().nullable(),
  language: z.string(),
  model_id: z.string(),
  name: z.string(),
  org_id: z.string(),
  partitioned_by: z.array(z.string()).optional().nullable(),
  revision_number: z.number(),
  schema: z.array(publicModelColumnTypeSchema),
  start: z.string().optional().nullable(),
});

export const modelRevisionUpdateSchema = z.object({
  clustered_by: z.array(z.string()).optional().nullable(),
  code: z.string().optional(),
  created_at: z.string().optional(),
  cron: z.string().optional(),
  depends_on: z.array(publicModelDependencyTypeSchema).optional().nullable(),
  description: z.string().optional().nullable(),
  display_name: z.string().optional(),
  end: z.string().optional().nullable(),
  hash: z.string().optional(),
  id: z.string().optional(),
  kind: publicModelKindSchema.optional(),
  kind_options: publicModelKindOptionsSchema.optional().nullable(),
  language: z.string().optional(),
  model_id: z.string().optional(),
  name: z.string().optional(),
  org_id: z.string().optional(),
  partitioned_by: z.array(z.string()).optional().nullable(),
  revision_number: z.number().optional(),
  schema: z.array(publicModelColumnTypeSchema).optional(),
  start: z.string().optional().nullable(),
});

export const modelRevisionRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("model_revision_model_id_fkey"),
    columns: z.tuple([z.literal("model_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("model"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("model_revision_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const modelRunRowSchema = z.object({
  completed_at: z.string().nullable(),
  id: z.string(),
  logs_url: z.string().nullable(),
  model_id: z.string(),
  model_release_id: z.string(),
  org_id: z.string(),
  started_at: z.string(),
  status: publicModelRunStatusSchema,
});

export const modelRunInsertSchema = z.object({
  completed_at: z.string().optional().nullable(),
  id: z.string().optional(),
  logs_url: z.string().optional().nullable(),
  model_id: z.string(),
  model_release_id: z.string(),
  org_id: z.string(),
  started_at: z.string().optional(),
  status: publicModelRunStatusSchema.optional(),
});

export const modelRunUpdateSchema = z.object({
  completed_at: z.string().optional().nullable(),
  id: z.string().optional(),
  logs_url: z.string().optional().nullable(),
  model_id: z.string().optional(),
  model_release_id: z.string().optional(),
  org_id: z.string().optional(),
  started_at: z.string().optional(),
  status: publicModelRunStatusSchema.optional(),
});

export const modelRunRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("model_run_model_id_fkey"),
    columns: z.tuple([z.literal("model_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("model"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("model_run_model_release_id_fkey"),
    columns: z.tuple([z.literal("model_release_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("model_release"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("model_run_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const notebooksRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string(),
  data: z.string().nullable(),
  deleted_at: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  notebook_name: z.string(),
  org_id: z.string(),
  updated_at: z.string(),
});

export const notebooksInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string(),
  data: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  notebook_name: z.string(),
  org_id: z.string(),
  updated_at: z.string().optional(),
});

export const notebooksUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  data: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  notebook_name: z.string().optional(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const notebooksRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("saved_queries_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("saved_queries_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const organizationCreditTransactionsRowSchema = z.object({
  amount: z.number(),
  api_endpoint: z.string().nullable(),
  created_at: z.string(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  org_id: z.string(),
  transaction_type: z.string(),
  user_id: z.string(),
});

export const organizationCreditTransactionsInsertSchema = z.object({
  amount: z.number(),
  api_endpoint: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  org_id: z.string(),
  transaction_type: z.string(),
  user_id: z.string(),
});

export const organizationCreditTransactionsUpdateSchema = z.object({
  amount: z.number().optional(),
  api_endpoint: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  org_id: z.string().optional(),
  transaction_type: z.string().optional(),
  user_id: z.string().optional(),
});

export const organizationCreditTransactionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("organization_credit_transactions_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const organizationCreditsRowSchema = z.object({
  created_at: z.string(),
  credits_balance: z.number(),
  id: z.string(),
  last_refill_at: z.string().nullable(),
  org_id: z.string(),
  updated_at: z.string(),
});

export const organizationCreditsInsertSchema = z.object({
  created_at: z.string().optional(),
  credits_balance: z.number().optional(),
  id: z.string().optional(),
  last_refill_at: z.string().optional().nullable(),
  org_id: z.string(),
  updated_at: z.string().optional(),
});

export const organizationCreditsUpdateSchema = z.object({
  created_at: z.string().optional(),
  credits_balance: z.number().optional(),
  id: z.string().optional(),
  last_refill_at: z.string().optional().nullable(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const organizationCreditsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("organization_credits_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const organizationsRowSchema = z.object({
  billing_contact_email: z.string().nullable(),
  created_at: z.string(),
  created_by: z.string(),
  deleted_at: z.string().nullable(),
  enterprise_support_url: z.string().nullable(),
  id: z.string(),
  org_name: z.string(),
  plan_id: z.string(),
  updated_at: z.string(),
});

export const organizationsInsertSchema = z.object({
  billing_contact_email: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by: z.string(),
  deleted_at: z.string().optional().nullable(),
  enterprise_support_url: z.string().optional().nullable(),
  id: z.string().optional(),
  org_name: z.string(),
  plan_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const organizationsUpdateSchema = z.object({
  billing_contact_email: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  enterprise_support_url: z.string().optional().nullable(),
  id: z.string().optional(),
  org_name: z.string().optional(),
  plan_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const organizationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("organizations_created_by_fkey1"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("organizations_plan_id_fkey"),
    columns: z.tuple([z.literal("plan_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("pricing_plan"),
    referencedColumns: z.tuple([z.literal("plan_id")]),
  }),
]);

export const pricingPlanRowSchema = z.object({
  created_at: z.string(),
  max_credits_per_cycle: z.number().nullable(),
  plan_id: z.string(),
  plan_name: z.string(),
  price_per_credit: z.number(),
  priority: z.number(),
  refill_cycle_days: z.number().nullable(),
  updated_at: z.string(),
});

export const pricingPlanInsertSchema = z.object({
  created_at: z.string().optional(),
  max_credits_per_cycle: z.number().optional().nullable(),
  plan_id: z.string().optional(),
  plan_name: z.string(),
  price_per_credit: z.number(),
  priority: z.number().optional(),
  refill_cycle_days: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const pricingPlanUpdateSchema = z.object({
  created_at: z.string().optional(),
  max_credits_per_cycle: z.number().optional().nullable(),
  plan_id: z.string().optional(),
  plan_name: z.string().optional(),
  price_per_credit: z.number().optional(),
  priority: z.number().optional(),
  refill_cycle_days: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const publishedNotebooksRowSchema = z.object({
  created_at: z.string(),
  data_path: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  notebook_id: z.string(),
  updated_at: z.string(),
  updated_by: z.string().nullable(),
});

export const publishedNotebooksInsertSchema = z.object({
  created_at: z.string().optional(),
  data_path: z.string(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  notebook_id: z.string(),
  updated_at: z.string().optional(),
  updated_by: z.string().optional().nullable(),
});

export const publishedNotebooksUpdateSchema = z.object({
  created_at: z.string().optional(),
  data_path: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  notebook_id: z.string().optional(),
  updated_at: z.string().optional(),
  updated_by: z.string().optional().nullable(),
});

export const publishedNotebooksRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("published_notebooks_notebook_id_fkey"),
    columns: z.tuple([z.literal("notebook_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("notebooks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const purchaseIntentsRowSchema = z.object({
  completed_at: z.string().nullable(),
  created_at: z.string(),
  credits_amount: z.number(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  org_id: z.string().nullable(),
  package_id: z.string(),
  price_cents: z.number(),
  status: z.string(),
  stripe_session_id: z.string(),
  user_id: z.string(),
});

export const purchaseIntentsInsertSchema = z.object({
  completed_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  credits_amount: z.number(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  org_id: z.string().optional().nullable(),
  package_id: z.string(),
  price_cents: z.number(),
  status: z.string().optional(),
  stripe_session_id: z.string(),
  user_id: z.string(),
});

export const purchaseIntentsUpdateSchema = z.object({
  completed_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  credits_amount: z.number().optional(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  org_id: z.string().optional().nullable(),
  package_id: z.string().optional(),
  price_cents: z.number().optional(),
  status: z.string().optional(),
  stripe_session_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const purchaseIntentsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("purchase_intents_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const reservedNamesRowSchema = z.object({
  created_at: z.string(),
  name: z.string(),
});

export const reservedNamesInsertSchema = z.object({
  created_at: z.string().optional(),
  name: z.string(),
});

export const reservedNamesUpdateSchema = z.object({
  created_at: z.string().optional(),
  name: z.string().optional(),
});

export const resourcePermissionsRowSchema = z.object({
  chat_id: z.string().nullable(),
  created_at: z.string(),
  granted_by: z.string().nullable(),
  id: z.string(),
  notebook_id: z.string().nullable(),
  permission_level: z.string(),
  revoked_at: z.string().nullable(),
  updated_at: z.string(),
  user_id: z.string().nullable(),
});

export const resourcePermissionsInsertSchema = z.object({
  chat_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  granted_by: z.string().optional().nullable(),
  id: z.string().optional(),
  notebook_id: z.string().optional().nullable(),
  permission_level: z.string(),
  revoked_at: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const resourcePermissionsUpdateSchema = z.object({
  chat_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  granted_by: z.string().optional().nullable(),
  id: z.string().optional(),
  notebook_id: z.string().optional().nullable(),
  permission_level: z.string().optional(),
  revoked_at: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const resourcePermissionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("resource_permissions_chat_id_fkey"),
    columns: z.tuple([z.literal("chat_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("chat_history"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("resource_permissions_granted_by_fkey"),
    columns: z.tuple([z.literal("granted_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("resource_permissions_notebook_id_fkey"),
    columns: z.tuple([z.literal("notebook_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("notebooks"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("resource_permissions_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const userCreditsRowSchema = z.object({
  created_at: z.string(),
  credits_balance: z.number(),
  id: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const userCreditsInsertSchema = z.object({
  created_at: z.string().optional(),
  credits_balance: z.number().optional(),
  id: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const userCreditsUpdateSchema = z.object({
  created_at: z.string().optional(),
  credits_balance: z.number().optional(),
  id: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const userProfilesRowSchema = z.object({
  avatar_url: z.string().nullable(),
  email: z.string().nullable(),
  full_name: z.string().nullable(),
  id: z.string(),
  updated_at: z.string().nullable(),
  website: z.string().nullable(),
});

export const userProfilesInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string(),
  updated_at: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
});

export const userProfilesUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
});

export const usersByOrganizationRowSchema = z.object({
  created_at: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  org_id: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
  user_role: z.string(),
});

export const usersByOrganizationInsertSchema = z.object({
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_id: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
  user_role: z.string(),
});

export const usersByOrganizationUpdateSchema = z.object({
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
  user_role: z.string().optional(),
});

export const usersByOrganizationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("users_by_organization_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("users_by_organization_user_id_fkey1"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const acceptInvitationArgsSchema = z.object({
  p_invitation_id: z.string(),
  p_user_id: z.string(),
});

export const acceptInvitationReturnsSchema = z.boolean();

export const addCreditsArgsSchema = z.object({
  p_amount: z.number(),
  p_metadata: jsonSchema.optional(),
  p_transaction_type: z.string(),
  p_user_id: z.string(),
});

export const addCreditsReturnsSchema = z.boolean();

export const canGrantPermissionArgsSchema = z.object({
  granter_id: z.string(),
  permission_to_grant: z.string(),
  target_resource_id: z.string(),
  target_resource_type: z.string(),
  target_user_id: z.string().optional(),
});

export const canGrantPermissionReturnsSchema = z.boolean();

export const checkOrgAdminArgsSchema = z.object({
  check_org_id: z.string(),
  check_user_id: z.string(),
});

export const checkOrgAdminReturnsSchema = z.boolean();

export const checkOrgMembershipArgsSchema = z.object({
  check_org_id: z.string(),
  check_user_id: z.string(),
});

export const checkOrgMembershipReturnsSchema = z.boolean();

export const checkResourcePermissionArgsSchema = z.object({
  p_resource_id: z.string(),
  p_resource_type: z.string(),
});

export const checkResourcePermissionReturnsSchema = jsonSchema;

export const cleanupOrphanedInvitationsArgsSchema = z.never();

export const cleanupOrphanedInvitationsReturnsSchema = z.undefined();

export const deductCreditsArgsSchema = z.object({
  p_amount: z.number(),
  p_api_endpoint: z.string().optional(),
  p_metadata: jsonSchema.optional(),
  p_transaction_type: z.string(),
  p_user_id: z.string(),
});

export const deductCreditsReturnsSchema = z.boolean();

export const expireOldInvitationsArgsSchema = z.never();

export const expireOldInvitationsReturnsSchema = z.undefined();

export const getOgImageInfoArgsSchema = z.object({
  p_notebook_name: z.string(),
  p_org_name: z.string(),
});

export const getOgImageInfoReturnsSchema = jsonSchema;

export const getOrganizationCreditsArgsSchema = z.object({
  p_org_id: z.string(),
});

export const getOrganizationCreditsReturnsSchema = z.number();

export const getUserCreditsArgsSchema = z.object({
  p_user_id: z.string(),
});

export const getUserCreditsReturnsSchema = z.number();

export const hasuraTokenHookArgsSchema = z.object({
  event: jsonSchema,
});

export const hasuraTokenHookReturnsSchema = jsonSchema;

export const previewDeductCreditsArgsSchema = z.object({
  p_amount: z.number(),
  p_api_endpoint: z.string().optional(),
  p_metadata: jsonSchema.optional(),
  p_transaction_type: z.string(),
  p_user_id: z.string(),
});

export const previewDeductCreditsReturnsSchema = z.boolean();

export const uuidOrNullArgsSchema = z.object({
  str: z.string(),
});

export const uuidOrNullReturnsSchema = z.string();

export const validateOwnershipLimitsArgsSchema = z.object({
  p_current_record_id: z.string().optional(),
  p_new_role: z.string(),
  p_old_role: z.string().optional(),
  p_user_id: z.string(),
});

export const validateOwnershipLimitsReturnsSchema = z.boolean();

export const modelRevisionRowSchema = z.object({
  clustered_by: z.array(z.string()).nullable(),
  code: z.string(),
  created_at: z.string(),
  cron: z.string(),
  depends_on: z.array(publicModelDependencyTypeSchema).nullable(),
  description: z.string().nullable(),
  display_name: z.string(),
  end: z.string().nullable(),
  hash: z.string(),
  id: z.string(),
  kind: publicModelKindSchema,
  kind_options: publicModelKindOptionsSchema.nullable(),
  language: z.string(),
  model_id: z.string(),
  name: z.string(),
  org_id: z.string(),
  partitioned_by: z.array(z.string()).nullable(),
  revision_number: z.number(),
  schema: z.array(publicModelColumnTypeSchema),
  start: z.string().nullable(),
});
