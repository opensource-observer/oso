/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./supabase";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const adminUsersRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.number(),
  name: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const adminUsersInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const adminUsersUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const adminUsersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("admin_users_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const apiKeysRowSchema = z.object({
  api_key: z.string(),
  created_at: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  org_id: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const apiKeysInsertSchema = z.object({
  api_key: z.string(),
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  org_id: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const apiKeysUpdateSchema = z.object({
  api_key: z.string().optional(),
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const apiKeysRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("api_keys_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("api_keys_user_id_fkey1"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const creditTransactionsRowSchema = z.object({
  amount: z.number(),
  api_endpoint: z.string().nullable(),
  created_at: z.string(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  transaction_type: z.string(),
  user_id: z.string(),
});

export const creditTransactionsInsertSchema = z.object({
  amount: z.number(),
  api_endpoint: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  transaction_type: z.string(),
  user_id: z.string(),
});

export const creditTransactionsUpdateSchema = z.object({
  amount: z.number().optional(),
  api_endpoint: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  transaction_type: z.string().optional(),
  user_id: z.string().optional(),
});

export const dynamicConnectorsRowSchema = z.object({
  config: jsonSchema.nullable(),
  connector_name: z.string(),
  connector_type: z.string(),
  created_at: z.string(),
  created_by: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  is_public: z.boolean().nullable(),
  org_id: z.string(),
  updated_at: z.string(),
});

export const dynamicConnectorsInsertSchema = z.object({
  config: jsonSchema.optional().nullable(),
  connector_name: z.string(),
  connector_type: z.string(),
  created_at: z.string().optional(),
  created_by: z.string(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_public: z.boolean().optional().nullable(),
  org_id: z.string(),
  updated_at: z.string().optional(),
});

export const dynamicConnectorsUpdateSchema = z.object({
  config: jsonSchema.optional().nullable(),
  connector_name: z.string().optional(),
  connector_type: z.string().optional(),
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_public: z.boolean().optional().nullable(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const dynamicConnectorsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_org_id"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const organizationsRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  org_name: z.string(),
  updated_at: z.string(),
});

export const organizationsInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_name: z.string(),
  updated_at: z.string().optional(),
});

export const organizationsUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_name: z.string().optional(),
  updated_at: z.string().optional(),
});

export const organizationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("organizations_created_by_fkey1"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const purchaseIntentsRowSchema = z.object({
  completed_at: z.string().nullable(),
  created_at: z.string(),
  credits_amount: z.number(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  package_id: z.string(),
  price_cents: z.number(),
  status: z.string(),
  stripe_session_id: z.string(),
  user_id: z.string(),
});

export const purchaseIntentsInsertSchema = z.object({
  completed_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  credits_amount: z.number(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  package_id: z.string(),
  price_cents: z.number(),
  status: z.string().optional(),
  stripe_session_id: z.string(),
  user_id: z.string(),
});

export const purchaseIntentsUpdateSchema = z.object({
  completed_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  credits_amount: z.number().optional(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  package_id: z.string().optional(),
  price_cents: z.number().optional(),
  status: z.string().optional(),
  stripe_session_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const userCreditsRowSchema = z.object({
  created_at: z.string(),
  credits_balance: z.number(),
  id: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const userCreditsInsertSchema = z.object({
  created_at: z.string().optional(),
  credits_balance: z.number().optional(),
  id: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const userCreditsUpdateSchema = z.object({
  created_at: z.string().optional(),
  credits_balance: z.number().optional(),
  id: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const userProfilesRowSchema = z.object({
  avatar_url: z.string().nullable(),
  email: z.string().nullable(),
  full_name: z.string().nullable(),
  id: z.string(),
  updated_at: z.string().nullable(),
  username: z.string().nullable(),
  website: z.string().nullable(),
});

export const userProfilesInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
});

export const userProfilesUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
});

export const usersByOrganizationRowSchema = z.object({
  created_at: z.string(),
  deleted_at: z.string().nullable(),
  id: z.string(),
  org_id: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
  user_role: z.string(),
});

export const usersByOrganizationInsertSchema = z.object({
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_id: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
  user_role: z.string(),
});

export const usersByOrganizationUpdateSchema = z.object({
  created_at: z.string().optional(),
  deleted_at: z.string().optional().nullable(),
  id: z.string().optional(),
  org_id: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
  user_role: z.string().optional(),
});

export const usersByOrganizationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("users_by_organization_org_id_fkey"),
    columns: z.tuple([z.literal("org_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("organizations"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("users_by_organization_user_id_fkey1"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user_profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const addCreditsArgsSchema = z.object({
  p_user_id: z.string(),
  p_amount: z.number(),
  p_transaction_type: z.string(),
  p_metadata: jsonSchema.optional(),
});

export const addCreditsReturnsSchema = z.boolean();

export const deductCreditsArgsSchema = z.object({
  p_user_id: z.string(),
  p_amount: z.number(),
  p_transaction_type: z.string(),
  p_api_endpoint: z.string().optional(),
  p_metadata: jsonSchema.optional(),
});

export const deductCreditsReturnsSchema = z.boolean();

export const getUserCreditsArgsSchema = z.object({
  p_user_id: z.string(),
});

export const getUserCreditsReturnsSchema = z.number();

export const hasuraTokenHookArgsSchema = z.object({
  event: jsonSchema,
});

export const hasuraTokenHookReturnsSchema = jsonSchema;

export const previewDeductCreditsArgsSchema = z.object({
  p_user_id: z.string(),
  p_amount: z.number(),
  p_transaction_type: z.string(),
  p_api_endpoint: z.string().optional(),
  p_metadata: jsonSchema.optional(),
});

export const previewDeductCreditsReturnsSchema = z.boolean();
