

SYSTEM_PROMPT = """
Open Source Observer (OSO) is a system designed to measure, track, and reward open source contributions. It provides data infrastructure for tracking the impact and usage of open source projects, with a particular focus on blockchain ecosystems. This document provides a high-level overview of the OSO architecture, its key components, and how they interact.

## Core Models

OSO's data warehouse is built around several core models that represent different aspects of open source projects. These models are designed to be flexible and extensible, allowing for the addition of new data sources and metrics over time.

The core models can be categorized into three main groups:

1. **Directory Models**: Define the structure and relationships between projects, collections, and artifacts
2. **Metrics Models**: Define the metrics that can be calculated for projects
3. **Timeseries Models**: Store historical data about metrics over time

OSO uses a versioning system for its data models, particularly for the "mart" models which are the final, user-facing data products. These models follow a versioning convention where stable, production-ready models are suffixed with version numbers like _v1, while models under development use _v0.

## Key Fields and ID Generation

The following fields have the most semantic meaning across the OSO data models:

| Field | Description | Example Values |
|-------|-------------|----------------|
| `collection_source` | Source of the collection data | "OSS_DIRECTORY", "OP_ATLAS" |
| `collection_namespace` | Namespace of the collection | "oso", "retro-funding" |
| `collection_name` | Name of the collection | "ethereum-crypto-ecosystems", "optimism", "gitcoin-oss" |
| `project_source` | Source of the project data | "OSS_DIRECTORY", "OP_ATLAS" |
| `project_namespace` | Namespace of the project, where applicable | "oso", "" (empty string) |
| `project_name` | Name of the project | "safe-global", "zora", "stackup" |
| `artifact_source` | Source of the artifact data | "BASE", "GITHUB", "DEFILLAMA", "NPM", "WWW" |
| `artifact_namespace` | Namespace of the artifact, where applicable | "" (empty string), "code-423n4", "opencollective", "mozilla" |
| `artifact_name` | Name of the artifact | "go-ethereum", "0x76fd297e2d437cd7f76d50f01afe6160f86e9990", "@uniswap/v2-sdk", "uniswap-v3" |
| `metric_source` | Source of the metric data | "OSO" |
| `metric_namespace` | Namespace of the metric | "oso" |
| `metric_name` | Name of the metric | "GITHUB_opened_pull_requests_monthly", "SONEIUM_transactions_weekly", "BASE_gas_fees_over_all_time", "OPEN_COLLECTIVE_funding_received_daily" |

In OSO, IDs are generated by hashing the combination of SOURCE, namespace, and name. This approach ensures that:

1. IDs are consistent and deterministic
2. The same entity will always have the same ID
3. Different entities will have different IDs

This pattern is used for all entity IDs in the system, including:
- `collection_id`
- `project_id`
- `artifact_id`
- `metric_id`

## Event Sources and Types

OSO tracks events from multiple sources, each with its own set of event types. Metrics are formed by taking an `event_source` (the same as the `artifact_source`), the `event_type` and any aggregation semantics, and the time period. For example:

- GITHUB_opened_pull_requests_monthly
- BASE_defillama_tvl_daily
- OPTIMISM_active_addresses_aggregation_weekly
- GITHUB_stars_over_all_time

Below is a list of key event sources and their associated event types. 

### GitHub Events (GITHUB)

GitHub events track activities related to code repositories, including commits, issues, pull requests, and more.

#### Code Events

- **COMMIT_CODE**: A commit made to a code repository
- **FORKED**: A repository being forked by a user
- **RELEASE_PUBLISHED**: Publication of a new release version
- **STARRED**: A repository being starred by a user

#### Issue Events

- **ISSUE_OPENED**: Opening of a new issue
- **ISSUE_CLOSED**: Closing of an issue
- **ISSUE_REOPENED**: Reopening of a previously closed issue
- **ISSUE_COMMENT**: A comment made on an issue

#### Pull Request Events

- **PULL_REQUEST_OPENED**: Opening of a new pull request
- **PULL_REQUEST_CLOSED**: Closing of a pull request
- **PULL_REQUEST_MERGED**: Merging of a pull request into the main branch
- **PULL_REQUEST_REOPENED**: Reopening of a previously closed pull request
- **PULL_REQUEST_REVIEW_COMMENT**: A comment made during pull request review

#### Derived Metrics

- **Commit Frequency**: Number of commits per day/week/month
- **Contributor Activity**: Number of unique contributors over time
- **Issue Resolution Time**: Average time to close issues
- **Pull Request Merge Rate**: Percentage of pull requests that get merged
- **Repository Engagement**: Combined score of stars, forks, and watchers

### Blockchain Events

Blockchain events track on-chain activities, including contract invocations and transactions. The `event_source` is the name of the blockchain, eg, `OPTIMISM`, `BASE`, `ARBITRUM_ONE`, etc.

#### Contract Events

- **CONTRACT_INVOCATION**: Direct invocation of a contract
- **CONTRACT_INTERNAL_INVOCATION**: Internal contract calls

#### Derived Metrics

- **Contract Usage**: Number of contract invocations per day
- **Gas Usage**: Total gas consumed by contract interactions
- **Transaction Volume**: Number of transactions involving a contract
- **User Base**: Number of unique addresses interacting with a contract over a given time period

### ERC-4337 Events (4337)

ERC-4337 events track account abstraction activities on the blockchain.

#### User Operation Events

- **CONTRACT_INVOCATION_VIA_USEROP**: Contract invocation through a user operation
- **CONTRACT_INVOCATION_VIA_PAYMASTER**: Contract invocation through a paymaster
- **CONTRACT_INVOCATION_VIA_BUNDLER**: Contract invocation through a bundler

#### Derived Metrics

- **User Operation Volume**: Number of user operations per day
- **Paymaster Usage**: Percentage of operations using paymasters
- **Bundler Distribution**: Distribution of operations across bundlers

### Funding Events (FUNDING)

Funding events track financial transactions related to open source projects.

#### Financial Events

- **GRANT_RECEIVED_USD**: Receipt of a grant in USD equivalent
- **CREDIT**: Incoming financial transaction (Open Collective)
- **DEBIT**: Outgoing financial transaction (Open Collective)

#### Derived Metrics

- **Funding Volume**: Total funding received over time
- **Funding Sources**: Distribution of funding by source
- **Expense Categories**: Breakdown of expenses by category
- **Funding Sustainability**: Ratio of incoming to outgoing funds

### Dependency Events (DEPS_DEV)

Dependency events track package dependencies and their changes.

#### Dependency Events

- **ADD_DEPENDENCY**: Addition of a new dependency
- **REMOVE_DEPENDENCY**: Removal of an existing dependency
- **DOWNLOADS**: Number of package downloads on a given date

#### Derived Metrics

- **Dependency Growth**: Rate of dependency addition over time
- **Dependency Churn**: Rate of dependency changes
- **Package Popularity**: Download trends over time
- **Dependency Health**: Ratio of active to deprecated dependencies
"""