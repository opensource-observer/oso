MODEL (
  name oso.metrics_v0,
  kind FULL,
  dialect trino,
  tags (
    'export',
    'model_type=full',
    'model_category=metrics',
    'model_stage=mart'
  ),
  audits (
    has_at_least_n_rows(threshold := 0)
  ),
  description 'Each row represents metadata about a unique metric. This data can be used to analyze trends and performance indicators across various open source projects, supporting business decisions around developer engagement, funding, and project health. This table is necessary for doing keyword searches to discover relevant metrics ids, and joining on the other metrics tables (eg, key_metrics_by_project_v0 and timeseries_metrics_by_project_v0). Business questions that can be answered include: Which daily metrics are available for "BASE"? What are the available metric ids for GITHUB_stars? Which metrics are relevant to contract artifacts on "OPTIMISM"?',
  column_descriptions (
    metric_id = 'The unique identifier for the metric, generated by OSO.',
    metric_source = 'The source of the metric, typically "OSO".',
    metric_namespace = 'The namespace grouping of the metric.',
    metric_name = 'The name of the metric, such as "GITHUB_stars_daily".',
    metric_model = 'The model of the metric, such as "stars".',
    metric_event_source = 'The event source of the metric, such as "GITHUB".',
    metric_time_aggregation = 'The time aggregation of the metric, such as "daily".',
    display_name = 'A human-readable name for the metric, such as "GitHub Stars Daily".',
    description = 'A description of the metric, providing context and details about what it measures.',
    rendered_sql = 'The SQL query used to compute the metric, if applicable.',
    sql_source_path = 'The path to the SQL file that defines the metric.'
  )
);

@DEF(metric_regex_pattern, '^([A-Z0-9.()_]+)_([a-z0-9_]+)_(daily|weekly|monthly|quarterly|biannually|yearly|over_all_time)$');

WITH unioned_metric_names AS (
  SELECT
    *
  FROM oso.int_metric_names_from_artifact
  UNION ALL
  SELECT
    *
  FROM oso.int_metric_names_from_project
  UNION ALL
  SELECT
    *
  FROM oso.int_metric_names_from_collection
  UNION ALL
  SELECT
    *
  FROM oso.int_key_metric_names_from_artifact
  UNION ALL
  SELECT
    *
  FROM oso.int_key_metric_names_from_project
  UNION ALL
  SELECT
    *
  FROM oso.int_key_metric_names_from_collection
),
all_timeseries_metric_names AS (
  SELECT DISTINCT
    metric
  FROM unioned_metric_names
),
parsed_metric_names AS (
  SELECT
    metric AS metric_name,
    REGEXP_EXTRACT(metric, @metric_regex_pattern,1) AS event_source,
    REGEXP_EXTRACT(metric, @metric_regex_pattern,2) AS metric_model,
    REGEXP_EXTRACT(metric, @metric_regex_pattern,3) AS time_aggregation
  FROM all_timeseries_metric_names
),
all_metrics_metadata AS (
  SELECT
    metric AS metric_model,
    display_name,
    description,
    sql_source_path,
    rendered_sql
  FROM oso.metrics_metadata
), 
metrics_v0_no_casting AS (
  SELECT
    @oso_id('OSO', 'oso', p.metric_name) AS metric_id,
    'OSO' AS metric_source,
    'oso' AS metric_namespace,
    p.metric_name AS metric_name,
    p.metric_model AS metric_model,
    p.event_source AS metric_event_source,
    p.time_aggregation AS metric_time_aggregation,
    COALESCE(m.display_name, p.metric_model) AS display_name,
    COALESCE(m.description, 'TODO') AS description,
    COALESCE(m.rendered_sql, []) AS rendered_sql,
    COALESCE(m.sql_source_path, 'TODO') AS sql_source_path,
    'UNKNOWN' AS aggregation_function
  FROM parsed_metric_names AS p
  LEFT JOIN all_metrics_metadata AS m
    ON p.metric_model = m.metric_model
)
SELECT
  metric_id::VARCHAR,
  metric_source::VARCHAR,
  metric_namespace::VARCHAR,
  metric_name::VARCHAR,
  metric_model::VARCHAR,
  metric_event_source::VARCHAR,
  metric_time_aggregation::VARCHAR,
  display_name::VARCHAR,
  description::VARCHAR,
  rendered_sql,
  sql_source_path::VARCHAR,
  aggregation_function::VARCHAR
FROM metrics_v0_no_casting
