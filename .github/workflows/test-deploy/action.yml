# Generic worker executor. This is callable for use with cron scheduling.

# Execute the worker for a specific group
name: external-pr-test-deploy

inputs:
  sha:
    description: 'The sha to deploy'
    required: true
  pr:
    description: The pr number
    required: true
  requester:
    description: The user requesting the deploy
    required: true
  author:
    description: The author of the pull
    required: true
  gcp_service_account_path:
    description: The google service account
    required: true
  google_project_id:
    description: The google project id
    required: true

runs:
  using: "composite"
  steps:
    - name: Set pr and sha in the environment
      shell: bash
      run: |
        echo "PR_TOOLS_PR=${{ inputs.pr }}" >> "$GITHUB_ENV"
        echo "PR_TOOLS_SHA=${{ inputs.sha }}" >> "$GITHUB_ENV"

    # TODO: We should only deploy when data warehouse related files have changed. 
    # - name: Get changed files and write the outputs to a JSON file
    #   id: changed-files-write-output-files-json
    #   uses: tj-actions/changed-files@v43
    #   with:
    #     json: true
    #     write_output_files: true

    # - name: Evaluate if this is eligible for deployment
    #   id: is_eligible
    #   run: |
    #     cd ops/external-prs && pnpm tools oso test-deploy is-eligible $GITHUB_OUTPUT

    - name: checkout the PR
      uses: actions/checkout@v4
      with:
        # Check out pull request's HEAD commit instead of the merge commit to
        # prevent gitlint from failing due to too long commit message titles,
        # e.g. "Merge 3e621938d65caaa67f8e35d145335d889d470fc8 into 19a39b2f66cd7a165082d1486b2f1eb36ec2354a".
        ref: ${{ inputs.sha }}
        fetch-depth: "0"

        path: "ops/external-prs/pr-clone/"

    - name: Setup Python and UV
      uses: astral-sh/setup-uv@v5
      with:
        python-version: 3.12

    - name: Install dependencies
      run: uv sync --all-packages --all-extras

    - name: Install uv deps in the pr-clone
      shell: bash
      run: |
        cd ops/external-prs/pr-clone && uv sync --all-packages --all-extras

    - name: Run test-deploy
      shell: bash
      run: |
        mkdir -p $HOME/.dbt &&
        cd ops/external-prs && pnpm tools oso test-deploy --project-id ${{ inputs.google_project_id }} setup ${{ inputs.pr }} ${{ inputs.sha }} $HOME/.dbt/profiles.yml ${{ inputs.gcp_service_account_path }} pr-clone
      env:
        PR_TOOLS_REPO: ${{ github.repository }}
      
    